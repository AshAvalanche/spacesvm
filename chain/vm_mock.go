// Copyright (C) 2019-2021, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./chain/vm.go

// Package chain is a generated GoMock package.
package chain

import (
	reflect "reflect"

	database "github.com/ava-labs/avalanchego/database"
	ids "github.com/ava-labs/avalanchego/ids"
	snowman "github.com/ava-labs/avalanchego/snow/consensus/snowman"
	gomock "github.com/golang/mock/gomock"
)

// MockVM is a mock of VM interface.
type MockVM struct {
	ctrl     *gomock.Controller
	recorder *MockVMMockRecorder
}

// MockVMMockRecorder is the mock recorder for MockVM.
type MockVMMockRecorder struct {
	mock *MockVM
}

// NewMockVM creates a new mock instance.
func NewMockVM(ctrl *gomock.Controller) *MockVM {
	mock := &MockVM{ctrl: ctrl}
	mock.recorder = &MockVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVM) EXPECT() *MockVMMockRecorder {
	return m.recorder
}

// Accepted mocks base method.
func (m *MockVM) Accepted(arg0 *StatelessBlock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Accepted", arg0)
}

// Accepted indicates an expected call of Accepted.
func (mr *MockVMMockRecorder) Accepted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accepted", reflect.TypeOf((*MockVM)(nil).Accepted), arg0)
}

// ExecutionContext mocks base method.
func (m *MockVM) ExecutionContext(currentTime int64, parent *StatelessBlock) (*Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutionContext", currentTime, parent)
	ret0, _ := ret[0].(*Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutionContext indicates an expected call of ExecutionContext.
func (mr *MockVMMockRecorder) ExecutionContext(currentTime, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionContext", reflect.TypeOf((*MockVM)(nil).ExecutionContext), currentTime, parent)
}

// GetBlock mocks base method.
func (m *MockVM) GetBlock(arg0 ids.ID) (snowman.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0)
	ret0, _ := ret[0].(snowman.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockVMMockRecorder) GetBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockVM)(nil).GetBlock), arg0)
}

// Mempool mocks base method.
func (m *MockVM) Mempool() Mempool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mempool")
	ret0, _ := ret[0].(Mempool)
	return ret0
}

// Mempool indicates an expected call of Mempool.
func (mr *MockVMMockRecorder) Mempool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mempool", reflect.TypeOf((*MockVM)(nil).Mempool))
}

// Rejected mocks base method.
func (m *MockVM) Rejected(arg0 *StatelessBlock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rejected", arg0)
}

// Rejected indicates an expected call of Rejected.
func (mr *MockVMMockRecorder) Rejected(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rejected", reflect.TypeOf((*MockVM)(nil).Rejected), arg0)
}

// State mocks base method.
func (m *MockVM) State() database.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(database.Database)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockVMMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockVM)(nil).State))
}

// Verified mocks base method.
func (m *MockVM) Verified(arg0 *StatelessBlock) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Verified", arg0)
}

// Verified indicates an expected call of Verified.
func (mr *MockVMMockRecorder) Verified(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verified", reflect.TypeOf((*MockVM)(nil).Verified), arg0)
}
