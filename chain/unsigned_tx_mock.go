// Copyright (C) 2019-2021, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/quarkvm/chain (interfaces: UnsignedTransaction)

package chain

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
)

// MockUnsignedTransaction is a mock of UnsignedTransaction interface.
type MockUnsignedTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockUnsignedTransactionMockRecorder
}

// MockUnsignedTransactionMockRecorder is the mock recorder for MockUnsignedTransaction.
type MockUnsignedTransactionMockRecorder struct {
	mock *MockUnsignedTransaction
}

// NewMockUnsignedTransaction creates a new mock instance.
func NewMockUnsignedTransaction(ctrl *gomock.Controller) *MockUnsignedTransaction {
	mock := &MockUnsignedTransaction{ctrl: ctrl}
	mock.recorder = &MockUnsignedTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsignedTransaction) EXPECT() *MockUnsignedTransactionMockRecorder {
	return m.recorder
}

// BlockID mocks base method.
func (m *MockUnsignedTransaction) BlockID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// BlockID indicates an expected call of BlockID.
func (mr *MockUnsignedTransactionMockRecorder) BlockID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockID", reflect.TypeOf((*MockUnsignedTransaction)(nil).BlockID))
}

// Copy mocks base method.
func (m *MockUnsignedTransaction) Copy() UnsignedTransaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(UnsignedTransaction)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockUnsignedTransactionMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockUnsignedTransaction)(nil).Copy))
}

// Execute mocks base method.
func (m *MockUnsignedTransaction) Execute(arg0 *TransactionContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockUnsignedTransactionMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUnsignedTransaction)(nil).Execute), arg0)
}

// ExecuteBase mocks base method.
func (m *MockUnsignedTransaction) ExecuteBase(arg0 *Genesis) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteBase indicates an expected call of ExecuteBase.
func (mr *MockUnsignedTransactionMockRecorder) ExecuteBase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBase", reflect.TypeOf((*MockUnsignedTransaction)(nil).ExecuteBase), arg0)
}

// FeeUnits mocks base method.
func (m *MockUnsignedTransaction) FeeUnits(arg0 *Genesis) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeUnits", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// FeeUnits indicates an expected call of FeeUnits.
func (mr *MockUnsignedTransactionMockRecorder) FeeUnits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeUnits", reflect.TypeOf((*MockUnsignedTransaction)(nil).FeeUnits), arg0)
}

// LoadUnits mocks base method.
func (m *MockUnsignedTransaction) LoadUnits(arg0 *Genesis) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUnits", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// LoadUnits indicates an expected call of LoadUnits.
func (mr *MockUnsignedTransactionMockRecorder) LoadUnits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUnits", reflect.TypeOf((*MockUnsignedTransaction)(nil).LoadUnits), arg0)
}

// Magic mocks base method.
func (m *MockUnsignedTransaction) Magic() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Magic")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Magic indicates an expected call of Magic.
func (mr *MockUnsignedTransactionMockRecorder) Magic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Magic", reflect.TypeOf((*MockUnsignedTransaction)(nil).Magic))
}

// Prefix mocks base method.
func (m *MockUnsignedTransaction) Prefix() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prefix")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Prefix indicates an expected call of Prefix.
func (mr *MockUnsignedTransactionMockRecorder) Prefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefix", reflect.TypeOf((*MockUnsignedTransaction)(nil).Prefix))
}

// Price mocks base method.
func (m *MockUnsignedTransaction) Price() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Price")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Price indicates an expected call of Price.
func (mr *MockUnsignedTransactionMockRecorder) Price() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Price", reflect.TypeOf((*MockUnsignedTransaction)(nil).Price))
}

// SetBlockID mocks base method.
func (m *MockUnsignedTransaction) SetBlockID(arg0 ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockID", arg0)
}

// SetBlockID indicates an expected call of SetBlockID.
func (mr *MockUnsignedTransactionMockRecorder) SetBlockID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockID", reflect.TypeOf((*MockUnsignedTransaction)(nil).SetBlockID), arg0)
}

// SetMagic mocks base method.
func (m *MockUnsignedTransaction) SetMagic(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMagic", arg0)
}

// SetMagic indicates an expected call of SetMagic.
func (mr *MockUnsignedTransactionMockRecorder) SetMagic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMagic", reflect.TypeOf((*MockUnsignedTransaction)(nil).SetMagic), arg0)
}

// SetPrice mocks base method.
func (m *MockUnsignedTransaction) SetPrice(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrice", arg0)
}

// SetPrice indicates an expected call of SetPrice.
func (mr *MockUnsignedTransactionMockRecorder) SetPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrice", reflect.TypeOf((*MockUnsignedTransaction)(nil).SetPrice), arg0)
}
